<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SL900ATag</name>
    </assembly>
    <members>
        <member name="T:SL900A.SL900ATag">
            <summary>
            Class that represents the SL900A temperature / sensor tag.	
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ERR_PASSWORD">
            <summary>
            Error code when password is required but the provided one is either missing or incorrect.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ERR_BATTERY">
            <summary>
            Battery error i.e. the tag is in fully passive mode and the battery level was requested.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ERR_NOT_ALLOWED">
            <summary>
            Command is not allowed in current mode.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ERR_EEPROM_BUSY">
            <summary>
            EEPROM was busy when tried to access.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.TEMP_SENS_TYPE">
            <summary>
            Constant defining the temperature sensor value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.EXT1_SENS_TYPE">
            <summary>
            Constant defining the external sensor 1 value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.EXT2_SENS_TYPE">
            <summary>
            Constant defining the external sensor 2 value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.BATTVOLT_TYPE">
            <summary>
            Constant defining the battery level sensor value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MAX_SENS_TYPE">
            <summary>
            Constant defining the last valid sensor type value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LFORM_DENSE">
            <summary>
            Constant defining the dense logging from.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LFORM_ALLOUT">
            <summary>
            Constant defining the dense logging from.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LFORM_CROSSING">
            <summary>
            Constant defining the limits crossing logging from.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LFORM_IRQ1">
            <summary>
            Constant defining the IRQ1 based logging.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LFORM_IRQ2">
            <summary>
            Constant defining the IRQ2 based logging.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LFORM_BOTHIRQS">
            <summary>
            Constant defining logging based on both IRQs.
            </summary>
        </member>
        <member name="M:SL900A.SL900ATag.IsSL900AError(System.Byte)">
            <summary>
            Checks whether given error can be interpreted as one backscattered by an SL900A tag.
            </summary>
            <param name="error">Tag backscattered error code.</param>
            <returns>True if the given error code is recognized as an SL900A error code.</returns>
            <remarks>
            <list type="table"><listheader><term>Value</term><description>Error meaning</description></listheader>
            <item>
            <term><see>ERR_PASSWORD</see></term><description>Error code when password is required but the provided one is either missing or incorrect.</description>
            </item>
            <item>
            <term><see>ERR_BATTERY</see></term><description>Battery error i.e. the tag is in fully passive mode and the battery level was requested.</description>
            </item>
            <item>
            <term><see>ERR_NOT_ALLOWED</see></term><description>Command is not allowed in current mode.</description>
            </item>
            <item>
            <term><see>ERR_EEPROM_BUSY</see></term><description>EEPROM was busy when tried to access.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:SL900A.SL900ATag.InterpretError(System.String,System.Byte)">
            <summary>
            Interpret SL900A tag error with prefix string to the message.
            </summary>
            <param name="pref">Prefix to add to the error message.</param>
            <param name="tagError">Byte error received from the tag.</param>
            <returns>Prefixed string representing the error if recognized.</returns>
            <see cref="F:SL900A.SL900ATag.ERR_PASSWORD"/>
            <see cref="F:SL900A.SL900ATag.ERR_BATTERY"/>
            <see cref="F:SL900A.SL900ATag.ERR_NOT_ALLOWED"/>
            <see cref="F:SL900A.SL900ATag.ERR_EEPROM_BUSY"/>
        </member>
        <member name="M:SL900A.SL900ATag.InterpretError(System.Byte)">
            <summary>
            Interpret SL900A tag error.
            </summary>
            <param name="tagError">Byte error received from the tag.</param>
            <returns>String representing the error if recognized.</returns>
            <see cref="F:SL900A.SL900ATag.ERR_PASSWORD"/>
            <see cref="F:SL900A.SL900ATag.ERR_BATTERY"/>
            <see cref="F:SL900A.SL900ATag.ERR_NOT_ALLOWED"/>
            <see cref="F:SL900A.SL900ATag.ERR_EEPROM_BUSY"/>
        </member>
        <member name="M:SL900A.SL900ATag.StartLog(SL900A.SL900ATag.LoggerTime)">
            <summary>
            Start logging with given start time.
            </summary>
            <param name="lt">Start time parameter, <see cref="T:SL900A.SL900ATag.LoggerTime"/>.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.StartLog">
            <summary>
            Start logging by getting the system time as a start value.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.StopLog">
            <summary>
            Stop logging.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.ComposeShelfLifeParams(SL900A.SL900ATag.ShelfLifeParam)">
            <summary>
            Compose two 32-bit unsigned integer parameters from the shelf life specification.
            </summary>
            <param name="slp">The shelf life parameters, <see cref="T:SL900A.SL900ATag.ShelfLifeParam"/>.</param>.
            <returns>An 32-bit unsigned integer array representing the tag required air parameters.</returns>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.ExtractShelfLifeResp(SL900A.SL900ATag.LogStateInfo)">
            <summary>
            Get the shelf life paraeter from the log state information.
            Used in getting the <see cref="P:SL900A.SL900ATag.ShelfLife"/>.
            </summary>
            <param name="lsi">The log state information from the tag.</param>
            <returns>Extracted shelf life parameter, <see cref="T:SL900A.SL900ATag.ShelfLifeParam"/>.</returns>
            <exception cref="T:System.ApplicationException">Exception thrown when the log state does not contain the shelf life information.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.ReadFIFO(System.Int32)">
            <summary>
            Read number of bytes from FIFO.
            The allowed byte count is 1...8.
            </summary>
            <param name="byteCount"></param>
            <returns>When successful, the return value is a byte array representing the read FIFO data.</returns>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
            <exception cref="T:System.ApplicationException">Exception is thrown if tag responded with an error or the length was invalid.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.WriteFIFO(System.Byte[])">
            <summary>
            Write number of bytes to FIFO
            The allowed byte count is 1...8.
            </summary>
            <param name="wrData">Data to write.</param>
            <returns>When successful, the return value is the length of the written byte array.</returns>
            <exception cref="T:System.NullReferenceException">Exception is thrown if the <paramref name="wrData"/> is null.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
            <exception cref="T:System.ApplicationException">Exception is thrown if tag responded with an error or the length was invalid.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.LastToStrings">
            <summary>
            Debug information about the last exchange.
            </summary>
            <returns>String array explaining the contents of the last exchange.</returns>
            <exception cref="T:System.ApplicationException">Throws "nothing to do" application exception if there is no last exchange available.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.#ctor(NurApiDotNet.NurApi.Tag)">
            <summary>
            Constructor.
            </summary>
            <param name="tag">The NurApi.tag class, <see cref="T:NurApiDotNet.NurApi.Tag"/></param>
        </member>
        <member name="M:SL900A.SL900ATag.#ctor(NurApiDotNet.NurApi)">
            <summary>
            Constructor that can be use to implement an "empty" tag that can be used to read sensor values without EPC singulation.
            </summary>
            <param name="hApi">The NurApi instance required for tag operation(s).</param>
        </member>
        <member name="M:SL900A.SL900ATag.IsMaskBitSet(System.UInt32,System.Int32)">
            <summary>
            Return whether a specified bit in a value is set or not.
            </summary>
            <param name="val">Value to check the bit from.</param>
            <param name="bit">Bit number running from 0 to 31 to check.</param>
            <returns>Returns true if the bit is set.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Exception is thrown when the bit number is invalid (less than 0 or greater than 31).</exception>
        </member>
        <member name="M:SL900A.SL900ATag.BuildDefault(SL900A.SL900ATag.BitBuffer,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Build default exchange.
            </summary>
            <param name="bb">Bit buffer to copy the bit data from.</param>
            <param name="expRespLength">Expected response length in bits. If zero, no specific RX length is expected.</param>
            <param name="stripHandle">Whether to strip the handle from the reponse or not (last two bytes).</param>
            <param name="isWrite">If true then the exchange will act like it is a write (air parameter and response timeout related behavior).</param>
            <returns>The built custom exchange parameters.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.BytesToBits(System.Int32)">
            <summary>
            Byte address to bit address.
            </summary>
            <param name="byteAddr">E.g. byte offset in an array. </param>
            <returns>Bit address for the byte offset.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.GetBit(System.Byte[],System.Int32)">
            <summary>
            Return a bit value from "big-endian source".
            </summary>
            <param name="src">Byte array source.</param>
            <param name="bitAddress">Bit address in the array.</param>
            <returns>Return whether the bit at <paramref name="bitAddress"/> is 1 or 0.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Can throw exception if addressed outside of the byte array.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.GetBitsBigEndian(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get value from bytes by extracting bits; return with system endian (little).
            </summary>
            <param name="src">Source byte array.</param>
            <param name="bitAddress">First bit's address (left most bit, big-endian i.e. MSB).</param>
            <param name="nBits">Number of bits in the value.</param>
            <returns>Extracted value in little endian format.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Can throw exception if addressed outside of the byte array.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.GetBigEndian32FromBytes(System.Byte[],System.Int32)">
            <summary>
            Get a big-endian coded unsigned 32-bit integer from a specified position in a byte array.
            </summary>
            <param name="src">Source byte array.</param>
            <param name="offset">Offset where to start the extracting.</param>
            <returns>32-bit unsigned integer value in little-endian format.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the operation tries to address the array out of its size.</exception>
            <exception cref="T:System.NullReferenceException">Thrown if <paramref name="src"/> is null.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.LogModeToBits(SL900A.SL900ATag.LogMode)">
            <summary>
            Convert logging mode parameter to uint.
            </summary>
            <param name="lm">Logging mode <see cref="T:SL900A.SL900ATag.LogMode"/>.</param>
            <returns>Unsigned int representing the bit fields in the log mode command.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.UintToLogMode(System.UInt32)">
            <summary>
            Convert the 32-bit presentation of the logging mode 
            as specified in SL900A spec into <see cref="T:SL900A.SL900ATag.LogMode"/>.
            </summary>
            <param name="logMode"></param>
            <returns></returns>
        </member>
        <member name="M:SL900A.SL900ATag.BuildStartTime(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Build 32-bit start time value as specified by the SL900A specification.
            </summary>
            <param name="s">Seconds.</param>
            <param name="min">Minutes.</param>
            <param name="h">Hours.</param>
            <param name="d">Day.</param>
            <param name="month">Month.</param>
            <param name="y">Year.</param>
            <returns>32-bit representation of the start time.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.LoggerTimeToUint(SL900A.SL900ATag.LoggerTime)">
            <summary>
            Convert "logger time" structure to 32-bit unsigned presentation of the time
            as specified by the SL900A specification.
            </summary>
            <param name="lt"><see cref="T:SL900A.SL900ATag.LoggerTime"/> time structure.</param>
            <returns>32-bit representation of the start time.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.TemperatureConversion(System.Double,System.Double,System.UInt32)">
            <summary>
            Convert the temperature sensor's A/D result into temperature 
            based on the given reference voltages v01 and v02 as specified
            by the SL900A datasheet, page 19.
            </summary>
            <param name="vo1mV">The Vo1 reference voltage in mV.</param>
            <param name="vo2mV">The Vo2 reference voltage in mV.</param>
            <param name="adValue"></param>
            <returns></returns>
        </member>
        <member name="M:SL900A.SL900ATag.PwdLevelToUint(SL900A.SL900ATag.PasswordLevel)">
            <summary>
            Convert a password level enumeration to a 32-bit unsigned integer.
            </summary>
            <param name="level">Password level as defined by <see cref="T:SL900A.SL900ATag.PasswordLevel"/>.</param>
            <returns>32-bit unsigned integer represeting the password level parameter to the tag.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.UintToPwdLevel(System.UInt32)">
            <summary>
            Return password level corresponding to the given 32-bit unsigned integer representation of the level.
            </summary>
            <param name="level">The password level represented by a 32-bit unsigned integer.</param>
            <returns>The password level as defined by <see cref="T:SL900A.SL900ATag.PasswordLevel"/>.</returns>
            <exception cref="T:System.ApplicationException">Exception is thrown when the value is less than <see cref="F:SL900A.SL900ATag.PWD_LEVEL_SYSTEM"/> 
            or bigger than <see cref="F:SL900A.SL900ATag.PWD_LEVEL_MEAS"/>
            </exception>
        </member>
        <member name="M:SL900A.SL900ATag.OpenSysArea(System.UInt32)">
            <summary>
            Open the system area with the given password.
            </summary>
            <param name="password">Password used to open the system area.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.OpenSysArea(System.UInt16,System.UInt16)">
            <summary>
            Open the system area with the given password constructed from the lower 16-bit and higher 16-bit part of the password.
            </summary>
            <param name="pwdLo">Lower 16 bits of the password.</param>
            <param name="pwdHi">Higher 16 bits of the password.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.OpenAppArea(System.UInt32)">
            <summary>
            Open the application area with the given password.
            </summary>
            <param name="password">Password used to open the system area.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.OpenAppArea(System.UInt16,System.UInt16)">
            <summary>
            Open the application area with the given password constructed from the lower 16-bit and higher 16-bit part of the password.
            </summary>
            <param name="pwdLo">Lower 16 bits of the password.</param>
            <param name="pwdHi">Higher 16 bits of the password.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.OpenMeasArea(System.UInt32)">
            <summary>
            Open the measurement area with the given password.
            </summary>
            <param name="password">Password used to open the system area.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.OpenMeasArea(System.UInt16,System.UInt16)">
            <summary>
            Open the measurement area with the given password constructed from the lower 16-bit and higher 16-bit part of the password.
            </summary>
            <param name="pwdLo">Lower 16 bits of the password.</param>
            <param name="pwdHi">Higher 16 bits of the password.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.SetSFEParameters(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Set specific SFE (Sensor Front End) parameters.
            </summary>
            <param name="ext1Range">External sensor 1 range.</param>
            <param name="ext2Range">External sensor 2 range.</param>
            <param name="verSensID">Verify sensor ID (0...3).</param>
            <param name="disAutoRange">Disable automatic range.</param>
            <param name="ext2HighImp">If true then the sensor 2 is considered as high impedance input otherwise linear conductive.</param>
            <param name="ext1Type">Value is 0...3.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
            <remarks>
            <list type="table"><listheader><term>Parameter <paramref name="ext1Type"/></term><description>External sensor 1 type is</description></listheader>
            <item><term>1</term><description>Linear resistive</description></item>
            <item><term>2</term><description>High impedance input, voltage follower, bridge</description></item> 
            <item><term>3</term><description>Reserved</description></item>
            <item><term>4</term><description>capacitive or resistive sensor without DC (AC signal on EXC1)</description></item>
            </list>
            <list type="table"><listheader><term>Parameter <paramref name="ext2HighImp"/></term><description>External sensor 2 type is</description></listheader>
            <item><term>true</term><description>High impedance input, voltage follower, bridge</description></item>
            <item><term>false</term><description>Linear conductive sensor</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SL900A.SL900ATag.ReadSensor(System.UInt32)">
            <summary>
            Read specific sensor.
            </summary>
            <param name="sensor">Sensor to read.</param>
            <returns>Sensor value structure, see <see cref="T:SL900A.SL900ATag.SensorValue"/>.</returns>
            <exception cref="T:System.ApplicationException">Throw "value too big" exception if sensor value is greater than <see cref="F:SL900A.SL900ATag.MAX_SENS_TYPE"/>.</exception>
            <remarks>Other exceptions are as with reading e.g. <see cref="P:SL900A.SL900ATag.BattVoltValue"/>.</remarks>
        </member>
        <member name="M:SL900A.SL900ATag.ReadSensorUnselected(System.UInt32)">
            <summary>
            Read specific sensor without using the EPC singulation.
            </summary>
            <param name="sensor">Sensor to read.</param>
            <returns>Sensor value structure, see <see cref="T:SL900A.SL900ATag.SensorValue"/>.</returns>
            <exception cref="T:System.ApplicationException">Throw "value too big" exception if sensor value is greater than <see cref="F:SL900A.SL900ATag.MAX_SENS_TYPE"/>.</exception>
            <remarks>Other exceptions are as with reading e.g. <see cref="P:SL900A.SL900ATag.BattVoltValue"/>.</remarks>		
        </member>
        <member name="M:SL900A.SL900ATag.LoggingFormToUint(SL900A.SL900ATag.LoggingForm)">
            <summary>
            Convert <see cref="T:SL900A.SL900ATag.LoggingForm"/> to an unsigned integer.
            </summary>
            <param name="form">Logging form enumeration <see cref="T:SL900A.SL900ATag.LoggingForm"/>.</param>
            <returns>Converted unsigned integer that represents the logging form.</returns>
        </member>
        <member name="M:SL900A.SL900ATag.UintToLoggingForm(System.UInt32)">
            <summary>
            Convert a 32-bit logging form value, as specified in the SL900A specification, to the <see cref="T:SL900A.SL900ATag.LoggingForm"/> structure.
            </summary>
            <param name="lfValue">The value backscattered by the tag.</param>
            <returns><see cref="T:SL900A.SL900ATag.LoggingForm"/></returns>
            <exception cref="T:System.ApplicationException">Thrown with invalid value.</exception>		
        </member>
        <member name="M:SL900A.SL900ATag.SetLogLimits(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set log limits based on the given parameters.
            </summary>
            <param name="eLower">Extreme lower limit as defined in the LS900A specification.</param>
            <param name="lower">Loower limit as defined in the LS900A specification.</param>
            <param name="upper">Upper limit as defined in the LS900A specification.</param>
            <param name="eUpper">Extreme upper limit as defined in the LS900A specification.</param>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="M:SL900A.SL900ATag.VoltageConversion(SL900A.SL900ATag.BatteryInfo)">
            <summary>
            Get the voltage conversion from the read battery information.
            </summary>
            <param name="battInfo">Recently read battery information, <see cref="T:SL900A.SL900ATag.BatteryInfo"/>.</param>
            <returns>Interpreted voltage value.</returns>
            <remarks>
            If the return value is -1.0 then it means that no battery was detected.
            If the return value is -2.0 then it means that there was an A/D conversion error.
            </remarks>
        </member>
        <member name="P:SL900A.SL900ATag.Initialize">
            <summary>
            Do the initialization command.
            </summary>		
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Logging">
            <summary>
            Start or stop logging.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.ShelfLife">
            <summary>
            The ShelfLife attribute.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.FIFOStatus">
            <summary>
            FIFO register attribute.
            </summary>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
            <exception cref="T:System.ApplicationException">Exception is thrown if tag responded with an error.</exception>
            <remarks>
            <see cref="T:SL900A.SL900ATag.FIFOStatusReg"/>
            </remarks>
        </member>
        <member name="P:SL900A.SL900ATag.WriteTimeout">
            <summary>
            Time in milliseconds used when the operation is type of "write".
            Range is 30...100.
            </summary>
            <exception cref="T:System.ApplicationException">Is thrown when the value is out of range.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.ReadTimeout">
            <summary>
            Time in milliseconds used when the operation is type of "read".
            Range is 20...100.
            </summary>
            <exception cref="T:System.ApplicationException">Is thrown when the value is out of range.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Setup">
            <summary>
            Return the tag's current measurement setup.
            </summary>
            <seealso cref="T:SL900A.SL900ATag.MeasurementSetup"/>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.SystemPassword">
            <summary>
            Set the system password.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.ApplicationPassword">
            <summary>
            Set the application password.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.MeasurementPassword">
            <summary>
            Set the measurement password.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.LogState">
            <summary>
            Get current log state information from the tag. 
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.SFE">
            <summary>
            SFE (Sensor Front End) attribute.
            </summary>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when communication error with module or tag.</exception>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.TempSensorValue">
            <summary>
            Get temperature sensor value with command 0xAD.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Ext1SensorValue">
            <summary>
            Get external sensor 1 sensor value with command 0xAD.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Ext2SensorValue">
            <summary>
            Get external sensor 2 sensor value with command 0xAD.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.BattVoltValue">
            <summary>
            Battery voltage sensor value with command 0xAD.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Mode">
            <summary>
            Attribute used the set or get the logging mode.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Limits">
            <summary>
            Get or set the lmit information, <see cref="T:SL900A.SL900ATag.LogLimits"/>.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when tag responded with an error or the tag's response length was invalid.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Exception is thrown when communication error occured with the tag or module.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.Battery">
            <summary>
            The battery information, <see cref="T:SL900A.SL900ATag.BatteryInfo"/>.
            </summary>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when communication error with module or tag error.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.BatteryLevel">
            <summary>
            Return the 10-bit value for battery level as specified by the SL900A specification.
            </summary>
            <exception cref="T:System.ApplicationException">Throw this exception when A/D error is detected, invalid response or the battery is not in place.</exception>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when communication error with module or tag error.</exception>
        </member>
        <member name="P:SL900A.SL900ATag.BattVoltage">
            <summary>
            Return battery voltage value if battery is present.
            </summary>
            <remarks>
            If the return value is -1.0 then it means that no battery was detected.
            If the return value is -2.0 then it means that there was an A/D conversion error.
            </remarks>
            <exception cref="T:System.ApplicationException">Exception is thrown upon unexpected communication error(s).</exception>
        </member>
        <member name="T:SL900A.SL900ATag.LoggingForm">
            <summary>
            Describes how the logging should be done.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggingForm.Dense">
            <summary>
            All values stored (0).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggingForm.AllOut">
            <summary>
            All values out of limits are stored (1).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggingForm.Crossing">
            <summary>
            Only crossing points are stored (3).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggingForm.IRQ1">
            <summary>
            Triggered by IRQ1 (5).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggingForm.IRQ2">
            <summary>
            Triggered by IRQ1 (6).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggingForm.BothIRQs">
            <summary>
            Triggered by either IRQ (7).
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.LogLimits">
            <summary>
            Parameter structure for logging limits.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogLimits.extLower">
            <summary>
            Extreme lower limit.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogLimits.lower">
            <summary>
            Lower limit.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogLimits.upper">
            <summary>
            Upper limit.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogLimits.extUpper">
            <summary>
            Extreme upper limit.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.SFESetup">
            <summary>
            SFE (Sensor Front End) parameters as described by the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SFESetup.verSensID">
            <summary>
            Verify sensor ID.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SFESetup.disAutoRange">
            <summary>
            Automatic range disable.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SFESetup.ext2HighImp">
            <summary>
            External sensor 2 high impedance input / not.
            </summary>
            <remarks>
            <list type="table"> <listheader><term>value</term><description>External sensor 1</description></listheader>
            <item><term>true</term><description>High impedance input, voltage follower, bridge</description></item>
            <item><term>false</term><description>Linear conductive sensor</description></item> 
            </list>
            </remarks>
        </member>
        <member name="F:SL900A.SL900ATag.SFESetup.ext1Type">
            <summary>
            External sensor 1 type.
            </summary>
            <remarks>
            <list type="table"><listheader><term>Member ext1Type</term><description>External sensor 1 type is</description></listheader>
            <item><term>0</term><description>Linear resistive</description></item>
            <item><term>1</term><description>High impedance input, voltage follower, bridge</description></item> 
            <item><term>2</term><description>Reserved</description></item>
            <item><term>3</term><description>capacitive or resistive sensor without DC (AC signal on EXC1)</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:SL900A.SL900ATag.SFESetup.ext1Range">
            <summary>
            External sensor 1 range (current source value).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SFESetup.ext2Range">
            <summary>
            External sensor 2 range (resistive ladder).
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.FIFOStatusReg">
            <summary>
            Structure representing the FIFO status register as specified by
            the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.FIFOStatusReg.busy">
            <summary>
            Bit 7: FIFO busy.
            </summary>
            <remarks>IF this member is true when read then the FIFO was busy because of other access i.e. access via SPI.</remarks>
        </member>
        <member name="F:SL900A.SL900ATag.FIFOStatusReg.dataReady">
            <summary>
            Bit 6: data ready.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.FIFOStatusReg.noData">
            <summary>
            Bit 5: no data.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.FIFOStatusReg.fromRFID">
            <summary>
            Bit 4: 0 = data from SPI, 1 = data from RFID.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.FIFOStatusReg.byteCount">
            <summary>
            Number of valid bytes in FIFO.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.InitData">
            <summary>
            Structure that represents the initialization data as specified by the 
            SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.InitData.enIrqTimer">
            <summary>
            Enable IRQ + timer.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.InitData.dmExtSwitch">
            <summary>
            If true then the delay mode field is set to "external switch".
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.InitData.delayTime">
            <summary>
            12-bit value for delay time.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.InitData.brokenWordPtr">
            <summary>
            The 3-bit value for the "broken word pointer"-field.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.InitData.appWordCount">
            <summary>
            Number of words for application data.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.LoggerTime">
            <summary>
            Logger time parameter as a structure.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggerTime.sec">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggerTime.min">
            <summary>
            Minutes.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggerTime.hour">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggerTime.day">
            <summary>
            Day of the month.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggerTime.month">
            <summary>
            Month of the year.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LoggerTime.year">
            <summary>
            Year.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.ShelfLifeParam">
            <summary>
            Structure represeting the shelf life parameters.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.actEnergy">
            <summary>
            Activation energy.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.normTemp">
            <summary>
            Normal temperature.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.minTemp">
            <summary>
            Minimum temperature for product.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.maxTemp">
            <summary>
            Maximum temperature for product.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.slAlgEn">
            <summary>
            Shelf life algorithm enabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.negSlEn">
            <summary>
            Negative shelf life enabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.slSensId">
            <summary>
            Shelf life sensor ID.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.initTemp">
            <summary>
            Initial temperature for the shelf life.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.initLife">
            <summary>
            Initial shelf life value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.ShelfLifeParam.curShelfLife">
            <summary>
            24-bit value for the current shelf life.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.MeasurementSetup">
            <summary>
            Received when the <see cref="P:SL900A.SL900ATag.Setup"/> is read.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.startTime">
            <summary>
            Start time as spcified by the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.limits">
            <summary>
            Log limits as specified by <see cref="T:SL900A.SL900ATag.LogLimits"/>.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.form">
            <summary>
            Logging form as specified by <see cref="T:SL900A.SL900ATag.LoggingForm"/>.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.roll">
            <summary>
            If true then the storage rolls over when full.
            Otherwise it stops.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.battChkEn">
            <summary>
            Battery check enabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.tempSensEn">
            <summary>
            Temperature sensor enmabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.ext1En">
            <summary>
            External sensor 1 enabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.ext2En">
            <summary>
            External sensor 2 enabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.interval">
            <summary>
            Logging interval as spcified by the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.delayTime">
            <summary>
            Delay time as spcified by the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.delayModeExt">
            <summary>
            If true the then delay mode is "external switch", otherwise "timer".
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.irqTimerEn">
            <summary>
            IRQ + timer enabled / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.appDataWords">
            <summary>
            Number of words for application data.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.MeasurementSetup.brokenWordPtr">
            <summary>
            Broken word pointer.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.PasswordLevel">
            <summary>
            the password level enumeration.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.PasswordLevel.System">
            <summary>
            System area level.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.PasswordLevel.Application">
            <summary>
            Application area level.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.PasswordLevel.Measurement">
            <summary>
            Measurement area level.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.LogStateInfo">
            <summary>
            Structure defining the "get log state" response.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.eLowCnt">
            <summary>
            Extreme low limit counter.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.lowCnt">
            <summary>
            Low limit counter.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.uprCnt">
            <summary>
            Upper limit counter.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.eUprCnt">
            <summary>
            Extreme upper limit counter.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.addrPtr">
            <summary>
            The measurement address pointer.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.nrOfRepl">
            <summary>
            Number of memory replacements.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.nrOfMeas">
            <summary>
            Number of measurements.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.sysActive">
            <summary>
            System active / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.actLogging">
            <summary>
            Active (logging process).
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.full">
            <summary>
            Measurement area full.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.overWritten">
            <summary>
            Measurement(s) overwritten.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.adError">
            <summary>
            A/D error.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.battLow">
            <summary>
            Low battery.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.slLowError">
            <summary>
            Shelf life low error.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.slHighError">
            <summary>
            Shelf life high error.
            </summary>			
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.expired">
            <summary>
            Shelf life expired.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.hasShelfLife">
            <summary>
            Tells whether the shelf life related fields are valid or not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogStateInfo.shelfLife">
            <summary>
            Shelf Life Parameters.
            <see cref="T:SL900A.SL900ATag.ShelfLifeParam"/>
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.SensorValue">
            <summary>
            Structure representing a sensor value as defined by
            the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SensorValue.adError">
            <summary>
            Indicates A/D conversion error.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SensorValue.rangeOrLimit">
            <summary>
            The range/limit value as defined by
            the SL900A specification.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SensorValue.adValue">
            <summary>
            A/D conversion value.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.SensorValue.time">
            <summary>
            Approximate time in milliseconds that the command exchange took.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.LogMode">
            <summary>
            Structure that represents the logging mode parameters.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.form">
            <summary>
            Definition for the logging form;
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.roll">
            <summary>
            If the EEPROM is full and this flag is true,  then the tag
            continues from the beginning of the EEPROM and writes over old data.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.ext1En">
            <summary>
            Enables external sensor 1.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.ext2En">
            <summary>
            Enables external sensor 2.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.tempSensEn">
            <summary>
            Enables temperature sensor.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.battChkEn">
            <summary>
            Enables battery check.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.LogMode.interval">
            <summary>
            The logging interval.
            </summary>
        </member>
        <member name="T:SL900A.SL900ATag.BatteryInfo">
            <summary>
            Battery level / information structure.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.BatteryInfo.present">
            <summary>
            If this is set to false then the battery query responded with an error 
            stating that the bvattery is not present.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.BatteryInfo.adError">
            <summary>
            A/D conversion error / not.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.BatteryInfo.is3V">
            <summary>
            If true then the battery is 3V, otherwise 1.5V.
            </summary>
        </member>
        <member name="F:SL900A.SL900ATag.BatteryInfo.level">
            <summary>
            10-bit value for the battery level.
            </summary>
        </member>
    </members>
</doc>
